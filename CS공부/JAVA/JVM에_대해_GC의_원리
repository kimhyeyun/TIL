__22.03.31__

# Java Virtual Machine

## JVM이란?
___
- 스택 기반의 가상머신
- 역할 : 자바 애플리케이션을 클래스 로더를 통해 읽어 들여 자바 API와 함께 실행
- JAVA와 OS 사이에서 중개자 역할을 수행하여 OS에 구애받지 않고 재사용을 가능하게 해줌
- 가장 중요한 **메모리 관리, Garbage Collection**을 수행

### 자바 프로그램 실행과정
___
1. 프로그램이 실행되면 JVM은 OS로부터 이 프로그램이 필요로 하는 메모리를 할당받음. JVM은 이 메모리를 용도에 따라 여러 영역으로 나누어 관리
2. 자바 컴파일러(javac)가 자바 소스코드(.java)를 읽어들여 자바 바이트코드(class)로 변환
3. Class Loader를 통해 class파일들을 JVM으로 로딩
4. 로딩된 class 파일들은 Execution engine을 통해 해석됨
5. 해석된 바이트코드는 Runtime Data Areas에 배치되어 실질적인 수행이 이루어지게 된다.
이러한 실행 과정 속에서 JVM은 필요에 따라 Thread Synchronization과 GC같은 관리작업을 수행

![img.png](img.png)

### JVM 구성
#### Class Loader`클래스 로더`
> JVM내로 클래스(.class 파일)을 로드하고, 링크를 통해 배치하는 작업을 수행하는 모듈  
> Runtime 시에 동적으로 클래스를 로드한다.  
> .jar파일 내 저장된 클래스들을 JVM위에 탑재하고 사용하지 않는 클래스들은 메모리에서 삭제한다.`(컴파일러 역할)`  
> 자바는 동적코드, 컴파일 타임이 아니라 런타임에 참조한다. 즉, 클래스를 처음으로 참조할 때, 해당 클래스를 로드하고 링크한다는 것이다.
> **그 역할을 클래스 로더가 수행한다**


#### Execution Engine`실행 엔진`
> 클래스를 실행시키는 역할  
> 클래스 로더가 JVM내의 런타임 데이터 영역에 바이트 코드를 배치시키고, 이것은 실행엔진에 의해 실행됨  
> 자바 바이트코드는 기계가 바로 수행할 수 있는 언어보다는 비교적 인간이 보기 편한 형태로 기술된 것  
> 그래서 실행 엔진은 이와 같은 바이트코드를 실제로 JVM내부에서 기계가 실행할 수 있는 형태로 변경함  
> 이때 !! 두 가지 방식을 사용

#### Interpreter`인터프리터`
> 실행 엔진은 자바 바이트코드를 명령 단위로 읽어서 실행한다.  
> 하지만 이 방식은 인터프리터 언어의 단점을 그대로 갖고 있다.  
> 한 줄 씩 수행하기 때문에 느리다는 것 !!